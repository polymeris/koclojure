# UDL lexer for Clojure.
#
# Note: UDL is a state machine and it uses regular expressions to move between
#       the different language states.
#

language Clojure

################ Boilerplate ################

# Boilerplate - need to start with family set to markup and IN_M_DEFAULT state,
# we'll later perform a null-transition change to get into the SSL state.
family markup
initial IN_M_DEFAULT
# Null-transition to get into SSL state
state IN_M_DEFAULT:
/./ : redo, => IN_SSL_DEFAULT

################ Language Start ################

family ssl # server side language

# Specify the min and max styles we'll be referring to.
start_style SSL_DEFAULT
end_style SSL_VARIABLE

# If the language has keywords, specify which style needs to be transformed
keyword_style SSL_IDENTIFIER => SSL_WORD
keywords [
        # Keywords
        "def",
        "defonce",
        "cond",
        "apply",
        "if-not",
        "if-let",
        "if",
        "not",
        "not=",
        "=",
        "<",
        ">",
        "<=",
        ">=",
        "==",
        "+",
        "/",
        "*",
        "-",
        "rem",
        "quot",
        "neg?",
        "pos?",
        "delay?",
        "symbol?",
        "keyword?",
        "true?",
        "false?",
        "integer?",
        "empty?",
        "coll?",
        "list?",
        "set?",
        "ifn?",
        "fn?",
        "associative?",
        "sequential?",
        "sorted?",
        "counted?",
        "reversible?",
        "number?",
        "decimal?",
        "class?",
        "distinct?",
        "isa?",
        "float?",
        "rational?",
        "reduced?",
        "ratio?",
        "odd?",
        "even?",
        "char?",
        "seq?",
        "vector?",
        "string?",
        "map?",
        "nil?",
        "contains?",
        "zero?",
        "instance?",
        "not-every?",
        "not-any?",
        "libspec?",
        "->",
        "->>",
        "..",
        ".",
        "inc",
        "compare",
        "do",
        "dotimes",
        "mapcat",
        "take",
        "remove",
        "take-while",
        "drop",
        "letfn",
        "drop-last",
        "take-last",
        "drop-while",
        "while",
        "intern",
        "condp",
        "case",
        "reduced",
        "cycle",
        "split-at",
        "split-with",
        "repeat",
        "replicate",
        "iterate",
        "range",
        "merge",
        "zipmap",
        "declare",
        "line-seq",
        "sort",
        "comparator",
        "sort-by",
        "dorun",
        "doall",
        "nthnext",
        "nthrest",
        "partition",
        "eval",
        "doseq",
        "await",
        "await-for",
        "let",
        "agent",
        "atom",
        "send",
        "send-off",
        "release-pending-sends",
        "add-watch",
        "mapv",
        "filterv",
        "remove-watch",
        "agent-error",
        "restart-agent",
        "set-error-handler",
        "error-handler",
        "set-error-mode!",
        "error-mode",
        "shutdown-agents",
        "quote",
        "var",
        "fn",
        "loop",
        "recur",
        "throw",
        "try",
        "monitor-enter",
        "monitor-exit",
        "defmacro",
        "defn",
        "defn-",
        "macroexpand",
        "macroexpand-1",
        "for",
        "dosync",
        "and",
        "or",
        "when",
        "when-not",
        "when-let",
        "comp",
        "juxt",
        "partial",
        "sequence",
        "memoize",
        "constantly",
        "complement",
        "identity",
        "assert",
        "peek",
        "pop",
        "doto",
        "proxy",
        "defstruct",
        "first",
        "rest",
        "cons",
        "defprotocol",
        "cast",
        "coll",
        "deftype",
        "defrecord",
        "last",
        "butlast",
        "sigs",
        "reify",
        "second",
        "ffirst",
        "fnext",
        "nfirst",
        "nnext",
        "defmulti",
        "defmethod",
        "meta",
        "with-meta",
        "ns",
        "in-ns",
        "create-ns",
        "import",
        "refer",
        "keys",
        "select-keys",
        "vals",
        "key",
        "val",
        "rseq",
        "name",
        "namespace",
        "promise",
        "into",
        "transient",
        "persistent!",
        "conj!",
        "assoc!",
        "dissoc!",
        "pop!",
        "disj!",
        "use",
        "class",
        "type",
        "num",
        "float",
        "double",
        "short",
        "byte",
        "boolean",
        "bigint",
        "biginteger",
        "bigdec",
        "print-method",
        "print-dup",
        "throw-if",
        "printf",
        "format",
        "load",
        "compile",
        "get-in",
        "update-in",
        "pr",
        "pr-on",
        "newline",
        "flush",
        "read",
        "slurp",
        "read-line",
        "subvec",
        "with-open",
        "memfn",
        "time",
        "re-find",
        "re-groups",
        "rand-int",
        "rand",
        "mod",
        "locking",
        "assert-valid-fdecl",
        "alias",
        "resolve",
        "ref",
        "deref",
        "refset",
        "swap!",
        "reset!",
        "set-validator!",
        "compare-and-set!",
        "alter-meta!",
        "reset-meta!",
        "commute",
        "get-validator",
        "alter",
        "ref-set",
        "ref-history-count",
        "ref-min-history",
        "ref-max-history",
        "ensure",
        "sync",
        "io!",
        "new",
        "next",
        "conj",
        "set!",
        "to-array",
        "future",
        "future-call",
        "into-array",
        "aset",
        "gen-class",
        "reduce",
        "map",
        "filter",
        "find",
        "empty",
        "hash-map",
        "hash-set",
        "sorted-map",
        "sorted-map-by",
        "sorted-set",
        "sorted-set-by",
        "vec",
        "vector",
        "seq",
        "flatten",
        "reverse",
        "assoc",
        "dissoc",
        "list",
        "disj",
        "get",
        "union",
        "difference",
        "intersection",
        "extend",
        "extend-type",
        "extend-protocol",
        "int",
        "nth",
        "delay",
        "count",
        "concat",
        "chunk",
        "chunk-buffer",
        "chunk-append",
        "chunk-first",
        "chunk-rest",
        "max",
        "min",
        "dec",
        "unchecked-inc-int",
        "unchecked-inc",
        "unchecked-dec-inc",
        "unchecked-dec",
        "unchecked-negate",
        "unchecked-add-int",
        "unchecked-add",
        "unchecked-subtract-int",
        "unchecked-subtract",
        "chunk-next",
        "chunk-cons",
        "chunked-seq?",
        "prn",
        "vary-meta",
        "lazy-seq",
        "spread",
        "list*",
        "str",
        "find-keyword",
        "keyword",
        "symbol",
        "gensym",
        "force",
        "rationalize"
        ]

# Set the basic patterns we'll be using for styling transitions.
# For most programming languages, names cannot start with a number, but they
# often allow a number after the first character - e.g. "bar21a"
pattern FIRSTNAMECHAR = '\*\+-\.\/0-9<=>\?A-Z_a-z\x80-\xff' # names (identifier, keyword, variable...) only can start with these chars
pattern NAMECHAR = '$FIRSTNAMECHAR'      # rest of the name, after the first char
pattern WS = '\s\t\r\n'                    # whitespace
pattern OP = '\(\)\[\]\{\}#~@\'%'  # operator characters - escaping special regex values

################ Default Style ################

# Define what happens when in default (initial) state. This is where we set up
# the transitions to other states.
state IN_SSL_DEFAULT:

# ----------- Entering Comments ---------- #

# Lisp-style one line comments
';' : paint(upto, SSL_DEFAULT),  => IN_SSL_COMMENT_TO_EOL


# ----------- Entering Whitespace ---------- #

# Just stay in whatever style we currently are using.
/[$WS]+/  : #stay

# ----------- Entering Keyword ---------- #

":" : paint(upto, SSL_DEFAULT) => IN_SSL_CLJKEYWORD


# ----------- Entering Regex ---------- #

'#"' : paint(upto, SSL_DEFAULT), => IN_SSL_REGEX

# ----------- Entering Strings & chars ---------- #

'"' : paint(upto, SSL_DEFAULT), => IN_SSL_DSTRING
/\\/ : paint(upto, SSL_DEFAULT), => IN_SSL_CSTRING

# ----------- Entering Numbers ---------- #

# Go process a number, try to do it in regexes octal and hex first.
/0[Xx][0-9a-fA-F]+/ : paint(upto, SSL_DEFAULT), paint(include, SSL_NUMBER)  # Hex numbers
/[-+]?[1-9]+[0-9]*\/[1-9]+[0-9]*/ : paint(upto, SSL_DEFAULT), paint(include, SSL_NUMBER) # Fractions
/[-+]?[0-9]*\.[0-9]+/ : paint(upto, SSL_DEFAULT), paint(include, SSL_NUMBER) # Floating point
/[-+]?[0-9]+N?/ : paint(upto, SSL_DEFAULT), paint(include, SSL_NUMBER)   # Regular numbers

# ----------- Entering bools ---------- #
#"true"  : paint(upto, SSL_DEFAULT), paint(include, SSL_VARIABLE)
#"false"  : paint(upto, SSL_DEFAULT), paint(include, SSL_VARIABLE)

# ----------- Entering Identifiers ---------- #

/[$FIRSTNAMECHAR][$NAMECHAR]*/  : paint(upto, SSL_DEFAULT), paint(include, SSL_IDENTIFIER)


# ----------- Entering Operators ---------- #

/[$OP]/ : paint(upto, SSL_DEFAULT), paint(include, SSL_OPERATOR)


# ----------- Entering nil ---------- #
#"nil"  : paint(upto, SSL_DEFAULT), paint(include, SSL_VARIABLE)

################ In Comments - determines how we exit a comment ################

state IN_SSL_COMMENT_TO_EOL: 
/[\r\n]/ : paint(upto, SSL_COMMENT), => IN_SSL_DEFAULT  # back to default state

################ In Strings - determines how we exit a string ################

state IN_SSL_DSTRING:
'"' : paint(include, SSL_STRING), => IN_SSL_DEFAULT  # back to default state
/\\./ : #stay, anything escaped means it's still a string

state IN_SSL_CSTRING:
/[$WS]+/ : paint(include, SSL_STRING), => IN_SSL_DEFAULT  # back to default state

state IN_SSL_REGEX: 
'"' : paint(include, SSL_REGEX), => IN_SSL_DEFAULT  # back to default state

state IN_SSL_CLJKEYWORD: 
/[$WS]/ : paint(upto, SSL_VARIABLE), => IN_SSL_DEFAULT  # back to default state
/[$OP]/ : paint(upto, SSL_VARIABLE), paint(include, SSL_OPERATOR)  # back to default state
################ End of State Handling ################


################ Fold Handling ################

fold "(" SSL_OPERATOR +
fold ")" SSL_OPERATOR -

################ End of Fold Handling ################
